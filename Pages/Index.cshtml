@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

@using System.Net;
@using System.Management;
@using System.Net.NetworkInformation;
@using System.Text;

@functions
{
    //IP Address
    string getIP()
    {

        string strHostName = string.Empty;
        strHostName = Dns.GetHostName();
        Console.WriteLine("Local Machine's Host Name: " + strHostName);
        IPHostEntry ipEntry = Dns.GetHostEntry(strHostName);
        IPAddress[] addr = ipEntry.AddressList;
        var address = addr.Select(x => x.ToString()).OrderBy(x => x.Length).FirstOrDefault();

        return address;
    }

     static string getMacAddress()
        {
            string addr = "";
            foreach (NetworkInterface n in NetworkInterface.GetAllNetworkInterfaces())
            {
                if (n.OperationalStatus == OperationalStatus.Up)
                {
                    addr += n.GetPhysicalAddress().ToString();
                    break;
                }
            }
            return addr;
        }

    string getSerialNo()
    {
        ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from Win32_Processor");
        string collectedInfo = ""; // here we will put the informa

        searcher.Query = new ObjectQuery("select * from Win32_BIOS");
        foreach (ManagementObject share in searcher.Get())
        {
            //then, the serial number of BIOS
            collectedInfo += share.GetPropertyValue("SerialNumber").ToString();
        }
        return collectedInfo;
    }


    string getMakeAndModel()
    {
        string sModel;
        // create management class object
        ManagementClass mc = new ManagementClass("Win32_ComputerSystem");
        //collection to store all management objects
        ManagementObjectCollection moc = mc.GetInstances();
        if (moc.Count != 0)
        {
            foreach (ManagementObject mo in mc.GetInstances())
            {
                // display general system information
                sModel = mo["Manufacturer"].ToString();
                return sModel;
            }
        }

        return string.Empty;
    }

    private static bool CheckCardReader()
    {

        ManagementObjectCollection collection;
        using (var searcher = new ManagementObjectSearcher(@"Select * From Win32_PnPEntity"))
            collection = searcher.Get();

        return collection != null;
    }

    public static bool CheckWirelessNWAdapter()
    {
        try
        {
            using (var client = new WebClient())
            using (client.OpenRead("http://clients3.google.com/generate_204"))
            {
                return true;
            }
        }
        catch
        {
            return false;
        }
    }

    public static bool CheckMultiBoot()
    {
        var os = Environment.OSVersion;

        return os.Version.Minor > 1;
    }

    public static string BIOSversion()
        {
            using (ManagementObjectSearcher mos = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS"))

            using (ManagementObjectCollection moc = mos.Get())

            {

                StringBuilder sb = new StringBuilder();

                foreach (ManagementObject mo in moc)

                {

                    string[] BIOSVersions = (string[])mo["BIOSVersion"];

                    foreach (string version in BIOSVersions)

                    {

                        sb.AppendLine(string.Format(version));
                        return sb.ToString();

                    }
                }
            }

            return string.Empty;
        }


}

@{
    //Machine Name
    string MachineName = Environment.MachineName;

    //IP Address
    string Address = getIP();

    //Username
    string UserName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;

    string MacAddress = getMacAddress();

    //Serial Number
    string SerialNo = getSerialNo();

    //Make and model
    string MakeMod = getMakeAndModel();

    //BIOS - Default
    string BiosPass = "Yes";
    string BiosHard = "Yes";

    //Card reader
    string CardReader = CheckCardReader() ? "No" : "Yes";

    //WirelessNW
    string WirelessNW = CheckWirelessNWAdapter() ? "No" : "Yes";

    //MultipleNW
    string MultipleNW = CheckWirelessNWAdapter() ? "No" : "Yes";

    //Multiple Booting
    string MultiBooting = CheckMultiBoot() ? "No" : "Yes";

    //Wake on LAN default
    string WakeOnLan = "No";

    //Chassis default
    string Chassis = "Yes";

    //BIOS version
    string BiosVersion = BIOSversion();


}
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head id="Head1" runat="server">
    <title></title>
</head>
<body>

    <form id="form1">
        Name of User: <input type="text" name="name" />
        <br />
        Last name: <input type="text" name="auditdoneby" />
        <br />
        Company name: <input type="text" name="compname" />
        <br />
        Position: <input type="text" name="position" />
        <br /> <br />
    </form> <br />

    <p id="mname"> Machine name: </p>
    <p id="ipaddr"> IP Address: </p>
    <p id="macaddr">MAC Address: </p>
    <p id="user"> Username: </p>
    <p id="serial"> Serial Number: </p>
    <p id="makemod"> Make and Model: </p>

    <br />
    <h4> Section 1</h4>
    <hr />

    <p id="biospass">BIOS Password: </p>
    <p id="bioshard">BIOS Hardening: </p>

    <br />
    <h4> Section 2</h4>
    <hr />

    <p id="cardreader">Card reader disabled: </p>
    <p id="wirelessnw">Wireless nw adapter disabled: </p>
    <p id="multiplenw">Multiple nw card disabled: </p>
    <p id="multiboot">Multiple booting disabled: </p>
    <p id="wakeonlan">Wake on lan disabled: </p>
    <p id="chassis">Chassis intrution enabled: </p>
    <p id="biosver">Bios version: </p>

    <br />
    <h4> Section 3</h4>
    <hr />

</body>
</html>

<script>

var machineName = '@MachineName';
    document.getElementById('mname').innerHTML += machineName;

var ipAddress = '@Address';
    document.getElementById('ipaddr').innerHTML += ipAddress;

    var macAddr = '@MacAddress';
    document.getElementById('macaddr').innerHTML += macAddr;

    var userName = '@UserName';
    document.getElementById('user').innerHTML += userName;

    var serialNo = '@SerialNo';
    document.getElementById('serial').innerHTML += serialNo;

    var makeModel = '@MakeMod';
    document.getElementById('makemod').innerHTML += makeModel;

    var biosPass = '@BiosPass';
    document.getElementById('biospass').innerHTML += biosPass;

    var biosHard = '@BiosHard';
    document.getElementById('bioshard').innerHTML += biosHard;

      var cardReader = '@CardReader';
    document.getElementById('cardreader').innerHTML += cardReader;

    var wirelessNW = '@WirelessNW';
    document.getElementById('wirelessnw').innerHTML += wirelessNW;

    var multiNW = '@MultipleNW';
    document.getElementById('multiplenw').innerHTML += multiNW;

    var multiBoot = '@MultiBooting';
    document.getElementById('multiboot').innerHTML += multiBoot;

      var wakeonLan = '@WakeOnLan';
    document.getElementById('wakeonlan').innerHTML += wakeonLan;

    var chassis = '@Chassis';
    document.getElementById('chassis').innerHTML += chassis;

    var biosVersion = '@BiosVersion';
    document.getElementById('biosver').innerHTML += biosVersion;

    @*var chassis = '@Chassis';
    document.getElementById('chassis').innerHTML += chassis;

    var chassis = '@Chassis';
    document.getElementById('chassis').innerHTML += chassis;*@


</script>







