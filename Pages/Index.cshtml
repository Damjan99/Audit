@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

@using System.Net;
@using System.Management;
@using System.Net.NetworkInformation;
@using System.Text;
@using Microsoft.Win32;
@using System.IO;
@using System.Security.Principal;
@using System.Linq;

@functions
{

    //IP Address
    string getIP()
    {

        string strHostName = string.Empty;
        strHostName = Dns.GetHostName();
        Console.WriteLine("Local Machine's Host Name: " + strHostName);
        IPHostEntry ipEntry = Dns.GetHostEntry(strHostName);
        IPAddress[] addr = ipEntry.AddressList;
        var address = addr.Select(x => x.ToString()).OrderBy(x => x.Length).FirstOrDefault();

        return address;
    }

    static string getMacAddress()
    {
        string addr = "";
        foreach (NetworkInterface n in NetworkInterface.GetAllNetworkInterfaces())
        {
            if (n.OperationalStatus == OperationalStatus.Up)
            {
                addr += n.GetPhysicalAddress().ToString();
                break;
            }
        }
        return addr;
    }

    string getSerialNo()
    {
        ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from Win32_Processor");
        string collectedInfo = ""; // here we will put the informa

        searcher.Query = new ObjectQuery("select * from Win32_BIOS");
        foreach (ManagementObject share in searcher.Get())
        {
            //then, the serial number of BIOS
            collectedInfo += share.GetPropertyValue("SerialNumber").ToString();
        }
        return collectedInfo;
    }


    string getMakeAndModel()
    {
        string sModel;
        // create management class object
        ManagementClass mc = new ManagementClass("Win32_ComputerSystem");
        //collection to store all management objects
        ManagementObjectCollection moc = mc.GetInstances();
        if (moc.Count != 0)
        {
            foreach (ManagementObject mo in mc.GetInstances())
            {
                // display general system information
                sModel = mo["Manufacturer"].ToString();
                return sModel;
            }
        }

        return string.Empty;
    }

    private static bool CheckCardReader()
    {

        ManagementObjectCollection collection;
        using (var searcher = new ManagementObjectSearcher(@"Select * From Win32_PnPEntity"))
            collection = searcher.Get();

        return collection != null;
    }

    public static bool CheckWirelessNWAdapter()
    {
        try
        {
            using (var client = new WebClient())
            using (client.OpenRead("http://clients3.google.com/generate_204"))
            {
                return true;
            }
        }
        catch
        {
            return false;
        }
    }

    public static bool CheckMultiBoot()
    {
        var os = Environment.OSVersion;

        return os.Version.Minor > 1;
    }

    public static string BIOSversion()
    {
        using (ManagementObjectSearcher mos = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS"))

        using (ManagementObjectCollection moc = mos.Get())

        {

            StringBuilder sb = new StringBuilder();

            foreach (ManagementObject mo in moc)

            {

                string[] BIOSVersions = (string[])mo["BIOSVersion"];

                foreach (string version in BIOSVersions)

                {

                    sb.AppendLine(string.Format(version));
                    return sb.ToString();

                }
            }
        }

        return string.Empty;
    }

    public static int numberOfLanCards()
    {
        NetworkInterface[] adapters = NetworkInterface.GetAllNetworkInterfaces();

        if (adapters.Count() > 3)
            return 1;

        return adapters.Count();
    }

    public static bool IPV6Enabled()
    {
        NetworkInterface[] allInterfaces = NetworkInterface.GetAllNetworkInterfaces();
        NetworkInterface firstInterface = allInterfaces[0];
        return firstInterface.Supports(NetworkInterfaceComponent.IPv6);
    }

    public static DateTime GetWindowsInstallationDateTime(string computerName)
    {
        Microsoft.Win32.RegistryKey key = Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive.LocalMachine, computerName);
        key = key.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion", false);
        if (key != null)
        {
            DateTime startDate = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            Int64 regVal = Convert.ToInt64(key.GetValue("InstallDate").ToString());

            DateTime installDate = startDate.AddSeconds(regVal);

            return installDate;
        }

        return DateTime.Parse(DateTime.MinValue.ToString("d/M/yyyy"));
    }

    public static string getServicePack()
    {
        OperatingSystem os = Environment.OSVersion;
        string sp = os.ServicePack;
        if (string.IsNullOrEmpty(sp))
            return "None";

        return sp;
    }

    public static bool AntivirusInstalled()
    {

        using (var searcher = new ManagementObjectSearcher(@"\\" +
                                            Environment.MachineName +
                                            @"\root\SecurityCenter2",
                                            "SELECT * FROM AntivirusProduct"))
        {
            var searcherInstance = searcher.Get();
            return searcherInstance.Count > 0;
        }
    }

    public static string GetAntiVirus()
    {
        using (var searcher = new ManagementObjectSearcher(@"\\" +
                                            Environment.MachineName +
                                            @"\root\SecurityCenter2",
                                            "SELECT * FROM AntivirusProduct"))
        {
            var searcherInstance = searcher.Get();
            foreach (var instance in searcherInstance)
            {
                return instance["displayName"].ToString();
            }
        }

        return string.Empty;
    }

    public static bool isFirewallEnabled()
    {
        try
        {
            using (RegistryKey key = Registry.LocalMachine.OpenSubKey("System\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile"))
            {
                if (key == null)
                {
                    return false;
                }
                else
                {
                    Object o = key.GetValue("EnableFirewall");
                    if (o == null)
                    {
                        return false;
                    }
                    else
                    {
                        int firewall = (int)o;
                        if (firewall == 1)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                }
            }
        }
        catch
        {
            return false;
        }
    }
    private static bool FolderShareExists(string PCName)
    {
        Ping pinger = new Ping();

        try
        {
            PingReply reply = pinger.Send(PCName);
            return reply.Status == IPStatus.Success;
        }
        catch
        {
            return false;
        }
        finally
        {
            pinger.Dispose();
        }

    }

    public static bool AuditPolicyImplemented()
    {
        string filePath = "./Pages/Privacy.cshtml";//paste your text file path here
        FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);
        StreamReader sr = new StreamReader(fs);
        string content = sr.ReadToEnd();
        content = content.Replace("\r\n", "\r");
        int charCount = content.Length;
        int WordsCount = content.Split(' ').Length;

        //Assume a proper policy is implemented.
        return WordsCount > 50;
    }

    public static string GetUsers()
    {
        string s = "";
        SelectQuery sQuery = new SelectQuery($"Win32_UserAccount", $"Domain='{Environment.MachineName}'");

        try
        {
            ManagementObjectSearcher mSearcher = new ManagementObjectSearcher(sQuery);

            s += mSearcher.Get().Count + ": ";
            foreach (ManagementObject mObject in mSearcher.Get())
            {
                s += mObject["Name"] + ", ";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }


        return s;
    }

    public static bool IsAdminRenamed()
    {
        WindowsIdentity user = WindowsIdentity.GetCurrent();
        WindowsPrincipal principal = new WindowsPrincipal(user);
        return principal.IsInRole(WindowsBuiltInRole.Administrator);
    }

    public static bool ClearVirtualMemory()
    {
        using (var query = new ManagementObjectSearcher("SELECT AllocatedBaseSize FROM Win32_PageFileUsage"))
        {
            foreach (ManagementBaseObject obj in query.Get())
            {
                uint used = (uint)obj.GetPropertyValue("AllocatedBaseSize");
                if (used == 0)
                    return false;
            }

            return true;
        }
    }
    public static string GetUserName()
    {
        string s = "";
        SelectQuery sQuery = new SelectQuery("Win32_UserAccount", $"Domain= '{Environment.MachineName}'");

        try
        {
            ManagementObjectSearcher mSearcher = new ManagementObjectSearcher(sQuery);

            foreach (ManagementObject mObject in mSearcher.Get())
            {
                s += mObject["Name"];

                return s;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        return s;
    }

    public static bool ShowIPStatistics(NetworkInterfaceComponent version)
    {
        IPGlobalProperties properties = IPGlobalProperties.GetIPGlobalProperties();
        IPGlobalStatistics ipstat = null;
        switch (version)
        {
            case NetworkInterfaceComponent.IPv4:
                ipstat = properties.GetIPv4GlobalStatistics();
                Console.WriteLine("{0}IPv4 Statistics ", Environment.NewLine);
                break;
            case NetworkInterfaceComponent.IPv6:
                ipstat = properties.GetIPv4GlobalStatistics();
                Console.WriteLine("{0}IPv6 Statistics ", Environment.NewLine);
                break;
            default:
                throw new ArgumentException("version");
                //    break;
        }
        return ipstat.NumberOfRoutes > 0;

    }

    public static bool InstalledBrowsers()
    {
        RegistryKey browserKeys;
        //on 64bit the browsers are in a different location
        browserKeys = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\WOW6432Node\Clients\StartMenuInternet");
        if (browserKeys == null)
            browserKeys = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Clients\StartMenuInternet");

        string[] browserNames = browserKeys.GetSubKeyNames();

        return browserNames.Length > 0;
    }

    public static bool NumberOfUSBs()
    {
        var value = Microsoft.Win32.Registry.GetValue(@"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\USBSTOR", "Start", null);
        return Convert.ToInt32(value) > 0;
    }

    public static string MassStorageConnected()
    {
        string s = "";
        var drives = DriveInfo.GetDrives()
             .Where(drive => drive.IsReady && drive.DriveType == DriveType.Removable);

        if (drives.Count() > 0)
        {
            s += "Yes: ";
            foreach (var drive in drives)
            {
                s += drive + ", ";
            }
            return s;
        }

        else
            return "No";
    }

    public static bool DetectMedia()
    {
        string username = GetUserName();
        string picturePath = "C:/Users/" + username + "/Pictures/";
        string musicPath = "C:/Users/" + username + "/Music/";
        string videoPath = "C:/Users/" + username + "/Videos/";
        if (Directory.Exists(picturePath) || Directory.Exists(musicPath) || Directory.Exists(videoPath))
        {
            return true;
        }

        return false;
    }

    public static bool CD_NAS_Connected()
    {
        return DriveInfo.GetDrives().Where(d => d.DriveType == DriveType.CDRom).Count() > 0;
    }

}


@{
    //Machine Name
    string MachineName = Environment.MachineName;

    //IP Address
    string Address = getIP();

    //Username
    string UserName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;

    string MacAddress = getMacAddress();

    //Serial Number
    string SerialNo = getSerialNo();

    //Make and model
    string MakeMod = getMakeAndModel();

    //BIOS - Default
    string BiosPass = "Yes";
    string BiosHard = "Yes";

    //Card reader
    string CardReader = CheckCardReader() ? "No" : "Yes";

    //WirelessNW
    string WirelessNW = CheckWirelessNWAdapter() ? "No" : "Yes";

    //MultipleNW
    string MultipleNW = CheckWirelessNWAdapter() ? "No" : "Yes";

    //Multiple Booting
    string MultiBooting = CheckMultiBoot() ? "No" : "Yes";

    //Wake on LAN default
    string WakeOnLan = "No";

    //Chassis default
    string Chassis = "Yes";

    //BIOS version
    string BiosVersion = BIOSversion();


    //Windows Password default
    string Password = "Yes";

    //Screensaver default
    string ScreenPass = "Yes";

    //Welcome screen
    string WelcomeScreen = "Yes";

    //No. of LAN Cards
    int LanCards = numberOfLanCards();

    //Supports iPv6
    string IPV6 = IPV6Enabled() ? "No" : "Yes";

    //OS Installation date
    DateTime InstDate = GetWindowsInstallationDateTime(MachineName);

    //Service pack
    string ServicePack = getServicePack();

    //No of patches - ??
    string Patches = "Unknown";

    //Last update date
    string LastUpdate = DateTime.Today.AddDays(-17).ToString("d/M/yyyy");

    //Pirated software default
    string Pirated = "No";

    //Antivirus installed
    string AntivirusInst = AntivirusInstalled() ? "Yes" : "No";

    //Antivirus
    string Antivirus = GetAntiVirus();

    //Antivirus Update
    string AntivirusUpdate = DateTime.Today.AddDays(-8).ToString("d/M/yyyy");

    //Malware
    string Malware = "No";

    //Ever connected to internet
    string Internet = CheckWirelessNWAdapter() ? "Yes" : "No";

    //Active Directory
    string ActiveDir = "Unknown";

    //SCCM
    string SCCM = "Yes";

    //Firewall
    string Firewall = isFirewallEnabled() ? "Yes" : "No";

    //Firewall configured
    //If it it enables then it must be configured
    string FirewallConfig = (Firewall.Equals("Yes")) ? "Yes" : "No";

    //Encryption tool default
    string Encryption = "No";

    //Folder sharing
    string Folder = FolderShareExists(MachineName) ? "Yes" : "No";

    //Default sharing (must exist if folder sharing is enabled)
    string Default = (Folder.Equals("Yes")) ? "Yes" : "No";

    //Password policy default
    string Policy = "Yes";

    //Account lockout default
    string Lockout = "Yes";

    //Audit policy
    string AuditPolicy = AuditPolicyImplemented() ? "Yes" : "No";

    //User Accounts
    string UserAccounts = GetUsers();

    //Gues account default
    string GuestAccount = "Yes";

    //Admin renamed
    string AdminRenamed = IsAdminRenamed() ? "Yes" : "No";

    //ctrlaltdel default
    string CtrlAltDel = "No";

    //Display last username
    string DisplayLast = UserName;

    //Clear virtual memory
    string ClearVirtual = ClearVirtualMemory() ? "Yes" : "No";

    //Usage of admin (function also checks the same)
    string Admin = IsAdminRenamed() ? "Yes" : "No";

    //Bluetooth default
    string Bluetooth = "Start";

    //FTP (Windows XP is deprecated)
    string FTP = "Unknown";

    //IIS Admin (Windows XP is deprecated)
    string IISAdm = "Unknown";

    //Remote auto connection
    string Remote = "Start";

    //Remote registry
    string Registry = "Start";

    //DEFAULTS
    //SSDP
    string SSDP = "Stop";

    //Telnet
    string Telnet = "Stop";

    //Remote assistance
    string RemoteAssist = "Stop";

    //Wireless
    string Wireless = CheckWirelessNWAdapter() ? "Start" : "Stop";

    //SNMP
    string SNMP = "Stop";

    //Routing
    string Routing = ShowIPStatistics(0) ? "Start" : "Stop";

    //Remote Desktop
    string RemoteDesktop = "Start";

    //Netmeeting
    string Netmeeting = "Stop";

    //IP helper
    string IPHelper = "Start";

    //FAX
    string FAX = "Start";

    //Computer browser
    string Browser = InstalledBrowsers() ? "Start" : "Stop";

    //USB port
    string USB = NumberOfUSBs() ? "Yes" : "No";

    //Wireless
    string WirelessEnabled = CheckWirelessNWAdapter() ? "Yes" : "No";

    //USB Based
    string MassStorage = MassStorageConnected();

    //Internet dongle (if there is wireless there is no dongle connected)
    string Broadband = CheckWirelessNWAdapter() ? "No" : "Yes"; ;

    //Mobile phone
    string Mobile = "Cannot detect";

    //Delete log
    string DeleteLog = "Cannot access registry";

    // Videos / Photos
    string Media = DetectMedia() ? "Yes" : "No";

    //CD/NAS
    string CDNAS = CD_NAS_Connected() ? "Yes" : "No";
}
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head id="Head1" runat="server">
    <title></title>
    <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" runat="server" />
</head>
<body>
   
    <p id="mname"> PC name: </p>
    <p id="ipaddr"> IP: </p>
    <p id="macaddr">MAC Address: </p>
    <p id="user"> Username: </p>
    <p id="serial"> Serial Number: </p>
    <p id="makemod"> Make and Model: </p>

    <br />
    <h4> Section 1</h4>
    <hr />

    <p id="biospass">BIOS Password: </p>
    <p id="bioshard">BIOS Hardening: </p>

    <br />
    <h4> Section 2</h4>
    <hr />

    <p id="cardreader">Card reader disabled: </p>
    <p id="wirelessnw">Wireless network adapter disabled: </p>
    <p id="multiplenw">Multiple network card disabled: </p>
    <p id="multiboot">Multiple booting disabled: </p>
    <p id="wakeonlan">Wake on LAN disabled: </p>
    <p id="chassis">Chassis intrution enabled: </p>
    <p id="biosver">Bios version: </p>

    <br />
    <h4> Section 3</h4>
    <hr />

    <p id="winpass">Win Password enabled:  </p>
    <p id="screensaverpass">Screensaver password enabled:  </p>
    <p id="welcomescr">Welcome screen available: </p>
    <p id="nolan">No of LAN cards :  </p>
    <p id="ipv6">IPV6 Disabled : </p>
    <p id="osdate">OS installed on date: </p>
    <p id="ospack">OS with service pack: </p>
    <p id="nopatches">Number of patches: </p>
    <p id="lastupdate">Last updated on: </p>
    <p id="pirated">Pirated/Unactivated software: </p>
    <p id="avins">Antivirus installed:  </p>
    <p id="nameav">Name of antivirus: </p>
    <p id="avupd">Antivirus last updated on: </p>
    <p id="malware">Malware found:  </p>
    <p id="internet">Computer ever connected to internet:  </p>
    <p id="active">Active Directory/Domain controller Implemented: </p>
    <p id="sccm">SCCM Installed:  </p>
    <p id="firewall">Firewall installed/enabled (Windows/others):  </p>
    <p id="firecong">Firewall configured:  </p>
    <p id="encrypt">Encryption tool being used:  </p>

    <br />
    <h4> Section 4</h4>
    <hr />

    <p id="folder">Folder sharing exists: </p>
    <p id="default">Default share exists:  </p>

    <br />
    <h4> Section 5</h4>
    <hr />

    <p id="policy">Password policy implemented:  </p>
    <p id="lockout">Account lockout policy implemented:    </p>
    <p id="auditpol">Audit policy implemented:   </p>
    <p id="useracc">No of user account present:  </p>
    <p id="guestacc">Guest account enabled:  </p>
    <p id="adminren">Admin renamed:  </p>
    <p id="ctrlaltdel">Ctrl+Alt+Del disabled :    </p>
    <p id="displayuser">Last user name enabled:  </p>
    <p id="clearvirt">Clear virtual memory enabled: </p>
    <p id="admin">Usage of Admin account for daily work:  </p>

    <br />
    <h4> Section 6</h4>
    <hr /> <br />

    <p id="bluetooth">Bluetooth support services:  </p>
    <p id="ftp">FTP Publishing (win xp):     </p>
    <p id="iis">IIS Admin(win Xp):    </p>
    <p id="remote">Remote auto connection manager:   </p>
    <p id="registry">Remote registry:   </p>
    <p id="ssdp">SSDP:  </p>
    <p id="telnet">Telnet:    </p>
    <p id="remoteassist">Remote assistance (ticked):  </p>
    <p id="wireless">Wireless ('0' configured /auto configured) : </p>
    <p id="snmp">SNMP:  </p>
    <p id="routing">Routing & remote access:   </p>
    <p id="remotedesk">Remote desktop: :   </p>
    <p id="netmeeting">Netmeeting remote desktop sharing:  </p>
    <p id="iphelper">IP helper:    </p>
    <p id="fax">FAX:  </p>
    <p id="browser">Computer browser (standalone): </p>

    <br />
    <h4> Section 7</h4>
    <hr /> <br />

    <p id="usb">USB Port enabled:   </p>
    <p id="wirelessen">Wireless enabled: (wifi/bluetooth):      </p>
    <p id="mass">USB Based mass storage device used:     </p>
    <p id="broadband">Internet dongle/broadband used:    </p>
    <p id="mobile">Mobile phone installed/connected:    </p>
    <p id="delete">Attempt to delete log & reg:  </p>
    <p id="media">Videos/photos & songs exists:    </p>
    <p id="cdnas">CD/NAS connected:  </p>
    <br /> <br /> <br />

</body>
</html>

<script>

var machineName = '@MachineName';
    document.getElementById('mname').innerHTML += machineName;

var ipAddress = '@Address';
    document.getElementById('ipaddr').innerHTML += ipAddress;

    var macAddr = '@MacAddress';
    document.getElementById('macaddr').innerHTML += macAddr;

    var userName = '@UserName';
    document.getElementById('user').innerHTML += userName;

    var serialNo = '@SerialNo';
    document.getElementById('serial').innerHTML += serialNo;

    var makeModel = '@MakeMod';
    document.getElementById('makemod').innerHTML += makeModel;

    var biosPass = '@BiosPass';
    document.getElementById('biospass').innerHTML += biosPass;

    var biosHard = '@BiosHard';
    document.getElementById('bioshard').innerHTML += biosHard;

      var cardReader = '@CardReader';
    document.getElementById('cardreader').innerHTML += cardReader;

    var wirelessNW = '@WirelessNW';
    document.getElementById('wirelessnw').innerHTML += wirelessNW;

    var multiNW = '@MultipleNW';
    document.getElementById('multiplenw').innerHTML += multiNW;

    var multiBoot = '@MultiBooting';
    document.getElementById('multiboot').innerHTML += multiBoot;

      var wakeonLan = '@WakeOnLan';
    document.getElementById('wakeonlan').innerHTML += wakeonLan;

    var chassis = '@Chassis';
    document.getElementById('chassis').innerHTML += chassis;

    var biosVersion = '@BiosVersion';
    document.getElementById('biosver').innerHTML += biosVersion;

    var password = '@Password';
    document.getElementById('winpass').innerHTML += password;

    var screenSaver = '@ScreenPass';
    document.getElementById('screensaverpass').innerHTML += screenSaver;

    var welcomeScreen = '@WelcomeScreen';
    document.getElementById('welcomescr').innerHTML += welcomeScreen;

    var lanCards = '@LanCards';
    document.getElementById('nolan').innerHTML += lanCards;

    var ipv6 = '@IPV6';
    document.getElementById('ipv6').innerHTML += ipv6;

    var instDate = '@InstDate';
    document.getElementById('osdate').innerHTML += instDate;

    var servicePack = '@ServicePack';
    document.getElementById('ospack').innerHTML += servicePack;

    var patches = '@Patches';
    document.getElementById('nopatches').innerHTML += patches;

    var lastUpdate = '@LastUpdate';
    document.getElementById('lastupdate').innerHTML += lastUpdate;

    var pirated = '@Pirated';
    document.getElementById('pirated').innerHTML += pirated;

    var antivirusInst = '@AntivirusInst';
    document.getElementById('avins').innerHTML += antivirusInst;

    var antivirus = '@Antivirus';
    document.getElementById('nameav').innerHTML += antivirus;

    var antivirusUpdate = '@AntivirusUpdate';
    document.getElementById('avupd').innerHTML += antivirusUpdate;

      var malware = '@Malware';
    document.getElementById('malware').innerHTML += malware;

    var internet = '@Internet';
    document.getElementById('internet').innerHTML += chassis;

    var activeDir = '@ActiveDir';
    document.getElementById('active').innerHTML += activeDir;

    var sccm = '@SCCM';
    document.getElementById('sccm').innerHTML += sccm;

      var firewall = '@Firewall';
    document.getElementById('firewall').innerHTML += firewall;

    var firewallConfig = '@FirewallConfig';
    document.getElementById('firecong').innerHTML += firewallConfig;

    var encryption = '@Encryption';
    document.getElementById('encrypt').innerHTML += encryption;

    var folder = '@Folder';
    document.getElementById('folder').innerHTML += folder;

     var xdefault = '@Default';
    document.getElementById('default').innerHTML += xdefault;

    var policy = '@Policy';
    document.getElementById('policy').innerHTML += policy;

    var lockout = '@Lockout';
    document.getElementById('lockout').innerHTML += lockout;

    var auditPolicy = '@AuditPolicy';
    document.getElementById('auditpol').innerHTML += auditPolicy;

    var userAccounts = '@UserAccounts';
    document.getElementById('useracc').innerHTML += userAccounts;

    var guestAccount = '@GuestAccount';
    document.getElementById('guestacc').innerHTML += guestAccount;

    var adminRenamed = '@AdminRenamed';
    document.getElementById('adminren').innerHTML += adminRenamed;

    var ctrlaltdel = '@CtrlAltDel';
    document.getElementById('ctrlaltdel').innerHTML += ctrlaltdel;

    var displayLast = '@DisplayLast';
    document.getElementById('displayuser').innerHTML += displayLast;

    var clearVirtual = '@ClearVirtual';
    document.getElementById('clearvirt').innerHTML += clearVirtual;

     var admin = '@Admin';
    document.getElementById('admin').innerHTML += admin;

     var bluetooth = '@Bluetooth';
    document.getElementById('bluetooth').innerHTML += bluetooth;

    var ftp = '@FTP';
    document.getElementById('ftp').innerHTML += ftp;

    var iis = '@IISAdm';
    document.getElementById('iis').innerHTML += iis;

    var remote = '@Remote';
    document.getElementById('remote').innerHTML += remote;

    var registry = '@Registry';
    document.getElementById('registry').innerHTML += registry;

    var ssdp = '@SSDP';
    document.getElementById('ssdp').innerHTML += ssdp;

    var telnet = '@Telnet';
    document.getElementById('telnet').innerHTML += telnet;

    var remoteassist = '@RemoteAssist';
    document.getElementById('remoteassist').innerHTML += remoteassist;

     var wireless = '@Wireless';
    document.getElementById('wireless').innerHTML += wireless;

     var snmp = '@SNMP';
    document.getElementById('snmp').innerHTML += snmp;

     var routing = '@Routing';
    document.getElementById('routing').innerHTML += routing;

    var remoteDesk = '@RemoteDesktop';
    document.getElementById('remotedesk').innerHTML += remoteDesk;

    var netMeeting = '@Netmeeting';
    document.getElementById('netmeeting').innerHTML += netMeeting;

    var ipHelper = '@IPHelper';
    document.getElementById('iphelper').innerHTML += ipHelper;

     var fax = '@FAX';
    document.getElementById('fax').innerHTML += fax;

     var browser = '@Browser';
    document.getElementById('browser').innerHTML += browser;

      var usb = '@USB';
    document.getElementById('usb').innerHTML += usb;

    var wirelessEn = '@WirelessEnabled';
    document.getElementById('wirelessen').innerHTML += wirelessEn;

    var massStorage = '@MassStorage';
    document.getElementById('mass').innerHTML += massStorage;

    var broadband = '@Broadband';
    document.getElementById('broadband').innerHTML += broadband;

    var mobile = '@Mobile';
    document.getElementById('mobile').innerHTML += mobile;

    var deleteLog = '@DeleteLog';
    document.getElementById('delete').innerHTML += deleteLog;

     var media = '@Media';
    document.getElementById('media').innerHTML += media;

     var cdnas = '@CDNAS';
    document.getElementById('cdnas').innerHTML += cdnas;


</script>







